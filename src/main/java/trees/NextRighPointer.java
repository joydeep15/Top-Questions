package trees;

import utilities.Node;

import java.util.Arrays;

public class NextRighPointer {

    public static void main(String[] args) {
        Node tree = Node.createTree(Arrays.asList(35,69,62,-56,-49,-44,93,14,21,-43,10,23,9,-13,53,68,-73,14,1,-6,-65,-63,100,-6,-100,-16,74,20,-36,-3,70,-81,11,26,-72,-17,-52,-19,15,53,73,-84,-74,-83,25,99,-65,37,-18,16,-89,-85,18,-83,35,-60,75,1,46,21,41,84,-58,-6,15,46,-48,-81,-58,24,71,-100,-18,45,-31,-31,70,21,5,-29,39,31,-98,72,99,23,-17,10,-9,-77,-35,-72,-100,89,15,-28,48,-86,63,-54,81,95,-85,-74,-74,-65,6,56,-88,88,-79,-73,5,-54,-82,64,-99,-92,-89,-94,-13,-98,-38,20,82,-67,58,-33,-65,-85,87,-17,61,11,-56,34,95,37,-49,21,-36,42,-92,-43,-48,34,87,-13,54,-29,-49,84,87,70,10,-44,88,37,-65,-6,-93,-51,61,84,36,62,93,66,-37,27,64,-52,25,37,65,-72,-56,52,43,-24,1,-55,9,46,-84,-14,-6,-46,15,-88,48,-92,-56,-19,-95,-23,61,-33,-85,-9,63,47,48,-91,-29,-54,50,80,59,52,-73,-72,79,-46,-58,67,-41,-13,-59,41,11,-33,78,-70,-65,-14,76,-43,48,0,38,-31,-71,84,-92,9,-98,-23,-38,-70,99,-78,67,-35,-14,-12,21,-53,-57,-6,-48,-36,-82,65,72,-62,48,0,31,-4,-27,-82,-42,28,12,-87,2,59,11,-2,32,79,-52,-89,-40,-31,38,21,60,48,-20,-59,89,32,65,-70,76,85,53,-90,-52,65,29,44,14,99,89,-86,-84,-44,43,-40,-46,49,-49,-41,74,-17,100,88,69,-65,-76,29,-88,-98,46,-75,41,70,-16,-39,-12,-49,18,79,-30,-70,-51,-30,-49,77,17,66,5,74,75,-16,91,-30,-78,-71,-68,53,35,-75,58,-26,84,-47,97,77,-72,-57,35,85,-55,-48,-96,-26,-67,74,-59,22,-47,-55,-66,7,-4,10,96,28,54,-40,-18,-31,-7,23,-98,-34,-91,-15,-53,-34,-45,33,-23,-55,-97,80,58,-4,-76,-32,-60,53,-74,-38,37,97,-69,-81,33,7,62,83,-57,68,-76,-29,-25,57,-58,49,87,71,-65,-83,30,92,18,-14,29,-34,45,-63,12,-92,-88,95,-6,-91,49,26,-43,13,40,-17,-11,83,-88,-50,-50,78,53,-53,2,-69,-21,-64,49,-54,4,33,-65,72,43,-68,14,-58,28,64,-53,74,-51,65,100,-53,39,17,-56,41,79,-85,-5,-91,65,-48,-87,83,-40,-80,49,58,28,20,82,-72,-98,61,-88,69,-33,44,-47,-89,-96,-5,-67,-11,-31,-92,21,58,63,71,71,79,-25,-78,35,94,29,-64,93,24,49,14,29,-12,31,56,-14,-69,75,96,66,89,19,76,-48,89,-75,-90,-79,-8,47,-39,-9,-42,5,-91,84,83,-2,5,25,-96,86,-11,-45,7,86,83,23,-31,3,-100,20,37,56,75,-88,79,0,86,15,30,69,5,-15,-24,-32,-59,71,-97,61,-74,-93,-30,-8,-73,-94,18,-85,15,44,-44,20,23,-73,-7,-83,1,-31,1,-84,-47,68,59,-78,-34,-29,4,-75,-23,97,-66,98,74,-37,-10,-84,39,36,53,95,65,29,-1,-15,94,-12,0,91,78,-71,-16,-61,-67,85,-39,76,64,-53,-86,59,30,-57,-53,-67,88,14,-34,52,56,-52,-82,90,34,-6,-87,-80,-39,-7,-94,26,-7,-11,-1,67,1,-21,54,37,17,-79,81,-77,-74,-92,-18,76,-46,-95,44,78,-79,65,-96,-31,-76,-53,2,-28,-69,-40,66,-26,59,-35,-90,-2,-67,28,-18,-37,32,-93,73,32,63,-23,38,-35,-73,21,19,76,23,58,70,-16,59,96,-51,-16,90,-16,44,20,38,48,98,35,-24,-37,-85,-26,92,56,-70,-2,87,93,-72,-10,6,7,-66,-4,36,37,-59,12,88,34,-54,-24,41,55,95,55,-41,-32,97,41,83,48,73,73,-26,-20,-33,39,65,-31,2,75,68,-50,-67,44,-37,60,-58,79,13,46,-86,-85,78,35,83,60,-30,31,-85,97,30,-83,-63,-24,36,-46,-2,42,15,29,-11,12,-58,-71,89,25,29,20,-44,80,36,78,74,12,13,-13,58,-57,-69,52,74,24,19,-2,-11,-20,-19,-66,62,-33,-11,-100,-24,7,-7,95,-94,99,93,-83,67,22,-49,47,18,11,41,48,-91,-76,-26,-13,-73,2,-42,-58,-61,25,-75,56,-5,-40,25,44,40,-93,67,-36,-63,-34,4,4,-43,43,-79,-84,-36,-76,-20,-59,-57,-72,-82,-80,85,62,-41,21,-6,38,43,-52,-98,67,19,-52,40,-53,-73,-64,96,-24,-90,-93,70,39,-17,17,40,84,-25,-18,52,67,-63,38,41,4,-52,96,25,21,17,73,59,32,-76,-42,-31,92,62,41,-47,-38,1,-7,-12,80,-85,72,-1,36,-87,41,94,42,12,-85,-4,30,12,74,-64,34,-36,-43,-58,-38,-44,72,44,9,-32,-83,-5,51,-73,69,-54,16,54,-20,-51,94,-87,73,20,69,92,-43,-69,31,97,21,49,-81,-15,93,-50,-94,-14,-5,11,-68,97,-43,96,4,37,63,21,72,14,-54,70,-32,44,5,-95,-12,100,-71,94,-51,32,-3,-16,-81,45,30,4,-76,98,3));
        connect(tree);
    }

    public static Node connect(Node root) {

        if (root == null) {
            return root;
        }

        root.next = null;
        Node parent = root;

        while (parent != null) {

            Node iterator = parent;

            while (iterator != null) {

                if (iterator.left != null) {
                    if (iterator.right != null) {
                        iterator.left.next = iterator.right;
                        iterator.right.next = getNext(iterator);
                    }else {
                        iterator.left.next = getNext(iterator);
                    }
                } else if (iterator.right != null) {
                    iterator.right.next = getNext(iterator);
                }

                iterator = iterator.next;
            }

            if (parent.left != null) {
                parent = parent.left;
            } else if (parent.right != null) {
                parent = parent.right;
            }else {
                parent = getNext(parent);
            }

        }

        return root;
    }



    public static Node getNext(Node root){

        Node temp = root.next;

        while(temp!=null){

            if(temp.left!=null){
                return temp.left;
            }
            if(temp.right!=null){
                return temp.right;
            }
            temp = temp.next;
        }
        return null;
    }
}
